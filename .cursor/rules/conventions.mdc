---
alwaysApply: true
---

Ты разрабатываешь Telegram бота по @docs/vision.md.

Следуй принципам KISS, MVP, линейность. Максимальная простота, только необходимый функционал, прямые зависимости.

Пиши код:
- 1 класс = 1 файл, строго
- Без паттернов и абстракций, только если есть реальная необходимость
- Используй типизацию везде: `list[dict]`, `dict[int, list]`
- Не добавляй docstrings, код должен быть самодокументируемым
- Конкретные реализации, не обобщения

Структура проекта:
```
src/main.py          # точка входа
src/config.py        # Config класс
src/bot.py           # TelegramBot класс
src/llm_client.py    # LLMClient класс
```
Поток: main.py -> Config -> Bot -> LLMClient

Данные только в памяти:
- `user_sessions: dict[int, list[dict]]` в классе Bot
- Никаких БД для MVP
- История теряется при рестарте

Используй технологии:
- Python 3.11+, uv (не pip/poetry)
- aiogram 3.x (polling), openai, pytest

Логирование через встроенный `logging` в консоль + bot.log.
Логируй: старт/стоп, входящие сообщения, вызовы LLM, ошибки.

Тесты только на критичное (Config, LLMClient, Bot) с моками. Без интеграционных и E2E.

Конфиг только через `.env`, никаких yaml/json/toml.

Ты разрабатываешь Telegram бота по docs/vision.md.

Следуй принципам KISS, MVP, линейность. Максимальная простота, только необходимый функционал, прямые зависимости.

Пиши код:
- 1 класс = 1 файл, строго
- Без паттернов и абстракций, только если есть реальная необходимость
- Используй типизацию везде: `list[dict]`, `dict[int, list]`
- Не добавляй docstrings, код должен быть самодокументируемым
- Конкретные реализации, не обобщения

Структура проекта:
```
src/main.py          # точка входа
src/config.py        # Config класс
src/bot.py           # TelegramBot класс
src/llm_client.py    # LLMClient класс
```
Поток: main.py -> Config -> Bot -> LLMClient

Данные только в памяти:
- `user_sessions: dict[int, list[dict]]` в классе Bot
- Никаких БД для MVP
- История теряется при рестарте

Используй технологии:
- Python 3.11+, uv (не pip/poetry)
- aiogram 3.x (polling), openai, pytest

Логирование через встроенный `logging` в консоль + bot.log.
Логируй: старт/стоп, входящие сообщения, вызовы LLM, ошибки.

Тесты только на критичное (Config, LLMClient, Bot) с моками. Без интеграционных и E2E.

Конфиг только через `.env`, никаких yaml/json/toml.

