---
alwaysApply: true
---
Работай строго по @docs/tasklist.md. Выполняй итерации последовательно.

## Цикл каждой итерации

### 1. ПЛАНИРОВАНИЕ
- Прочитай текущую итерацию из tasklist
- Предложи решение с конкретными отрезками кода
- Проверь соответствие принципам из docs/vision.md
- ОЖИДАЙ согласования перед началом

### 2. РЕАЛИЗАЦИЯ
- Реализуй согласованное решение
- Следуй правилам из docs/conventions.md
- Выполни все пункты итерации
- Применяй инструменты качества:
  - `make format` - форматирование кода
  - `make lint` - проверка стиля
  - `make typecheck` - проверка типов

### 3. ТЕСТИРОВАНИЕ
- Выполни тесты из раздела "Тест" итерации
- Запусти `make test` - все тесты должны проходить
- Запусти `make coverage` - проверь покрытие кода
- Убедись что всё работает
- ОЖИДАЙ подтверждения

### 4. ПРОВЕРКА КАЧЕСТВА
- Запусти `make lint` - исправь все ошибки
- Запусти `make format` - отформатируй код
- Запусти `make typecheck` - проверь типы
- Проверь соответствие принципам из docs/vision.md:
  - KISS - код остался простым?
  - MVP - не добавлено лишнего?
  - 1 класс = 1 файл?
  - Линейный код, прямые зависимости?

### 5. ФИКСАЦИЯ
- Отметь выполненные задачи (✅) в tasklist
- Обнови таблицу прогресса (статус ✅, дата)
- Сделай коммит

### 6. ПЕРЕХОД
- СОГЛАСУЙ переход к следующей итерации
- Повторяй цикл

Коммиты пиши:
- Глагол в третьем лице: добавлено, исправлено, реализовано
- Максимум 80 символов
- Отвечает на вопрос "Что изменится после коммита?"
- Без точки в конце
- Примеры: "Реализовано Config и структуру проекта", "Добавлено LLMClient с поддержкой OpenAI API"

## ОБЯЗАТЕЛЬНО

- ❌ НЕ начинай реализацию без согласования
- ❌ НЕ переходи к следующей итерации без подтверждения
- ❌ НЕ коммить код с ошибками линтера
- ❌ НЕ коммить код с падающими тестами
- ✅ Обновляй tasklist после каждой итерации
- ✅ Делай коммит после каждой итерации
- ✅ Запускай `make format` и `make lint` перед коммитом
- ✅ Запускай `make test` перед коммитом

## Инструменты качества

Используй команды:
```bash
make format     # Форматирование кода (Ruff)
make lint       # Проверка стиля (Ruff)
make typecheck  # Проверка типов (Mypy)
make test       # Запуск тестов
make coverage   # Покрытие тестами
```

Порядок перед коммитом:
1. `make format` - отформатировать
2. `make lint` - проверить и исправить
3. `make typecheck` - проверить типы
4. `make test` - убедиться что проходят
5. `make coverage` - проверить покрытие

## Структура сообщений

### При планировании:
```
Итерация N: [название]

Предлагаю следующее решение:
[описание]

Изменения:
- [файл 1]: [что меняется]
- [файл 2]: [что меняется]

Код:
[ключевые отрезки кода]

Проверка vision.md:
- [принцип 1]: [соответствует/не соответствует]
- [принцип 2]: [соответствует/не соответствует]

Готов начать после согласования.
```

### После реализации:
```
Итерация N: завершена

Реализовано:
- [список выполненных задач]

Тесты: [результат make test]
Линтер: [результат make lint]
Coverage: [% покрытия]

Проверка vision.md:
✓ [принцип 1]
✓ [принцип 2]

Обновил tasklist, готов делать коммит.
```
